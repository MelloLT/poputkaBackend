import sequelize from "../config/database";
import User from "../models/User";
import Trip from "../models/Trip";
import bcrypt from "bcryptjs";

export const seedData = async () => {
  try {
    await sequelize.sync({ force: true });
    console.log("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞");

    const hashedPassword = await bcrypt.hash("password123", 12);

    // –°–æ–∑–¥–∞–µ–º –≤–æ–¥–∏—Ç–µ–ª–µ–π
    const driver1 = await User.create({
      username: "ali_driver",
      email: "ali@example.com",
      phone: "+998901234567",
      password: hashedPassword,
      role: "driver",
      firstName: "–ê–ª–∏—à–µ—Ä",
      lastName: "–£—Å–º–∞–Ω–æ–≤",
      avatar: "https://example.com/ali.jpg",
      rating: 4.8,
      isVerified: true,
      car: {
        model: "Chevrolet Cobalt",
        color: "–ë–µ–ª—ã–π",
        licensePlate: "01 A 123 AB",
      },
    });

    const driver2 = await User.create({
      username: "dilbar_driver",
      email: "dilbar@example.com",
      phone: "+998907654321",
      password: hashedPassword,
      role: "driver",
      firstName: "–î–∏–ª–±–∞—Ä",
      lastName: "–ê—Ö–º–µ–¥–æ–≤–∞",
      avatar: "https://example.com/dilbar.jpg",
      rating: 4.9,
      isVerified: true,
      car: {
        model: "Nexia 3",
        color: "–°–µ—Ä–µ–±—Ä–∏—Å—Ç—ã–π",
        licensePlate: "01 B 456 CD",
      },
    });

    // –°–æ–∑–¥–∞–µ–º –ø–æ–µ–∑–¥–∫–∏ –º–µ–∂–¥—É —É–∑–±–µ–∫—Å–∫–∏–º–∏ –≥–æ—Ä–æ–¥–∞–º–∏
    await Trip.create({
      driverId: driver1.id,
      from: { city: "–¢–∞—à–∫–µ–Ω—Ç", address: "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∞–≤—Ç–æ–≤–æ–∫–∑–∞–ª" },
      to: { city: "–°–∞–º–∞—Ä–∫–∞–Ω–¥", address: "–ê–≤—Ç–æ–≤–æ–∫–∑–∞–ª –°–∞–º–∞—Ä–∫–∞–Ω–¥" },
      departureTime: new Date("2024-12-20T08:00:00"),
      price: 150000,
      availableSeats: 3,
      description: "–ö–æ–º—Ñ–æ—Ä—Ç–Ω–∞—è –ø–æ–µ–∑–¥–∫–∞, –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä, –±–∞–≥–∞–∂–Ω–∏–∫ –ø—Ä–æ—Å—Ç–æ—Ä–Ω—ã–π",
      status: "active",
    });

    await Trip.create({
      driverId: driver2.id,
      from: { city: "–¢–∞—à–∫–µ–Ω—Ç", address: "–Æ–∂–Ω—ã–π –≤–æ–∫–∑–∞–ª" },
      to: { city: "–ë—É—Ö–∞—Ä–∞", address: "–ê–≤—Ç–æ–≤–æ–∫–∑–∞–ª –ë—É—Ö–∞—Ä–∞" },
      departureTime: new Date("2024-12-21T10:30:00"),
      price: 200000,
      availableSeats: 2,
      description: "–ë—ã—Å—Ç—Ä–∞—è –ø–æ–µ–∑–¥–∫–∞ –ø–æ –Ω–æ–≤–æ–π –¥–æ—Ä–æ–≥–µ",
      status: "active",
    });

    await Trip.create({
      driverId: driver1.id,
      from: { city: "–°–∞–º–∞—Ä–∫–∞–Ω–¥", address: "–ê–≤—Ç–æ–≤–æ–∫–∑–∞–ª –°–∞–º–∞—Ä–∫–∞–Ω–¥" },
      to: { city: "–ë—É—Ö–∞—Ä–∞", address: "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∞–≤—Ç–æ–≤–æ–∫–∑–∞–ª" },
      departureTime: new Date("2024-12-22T14:00:00"),
      price: 120000,
      availableSeats: 4,
      description: "–ï–¥–µ–º —á–µ—Ä–µ–∑ –∂–∏–≤–æ–ø–∏—Å–Ω—ã–µ –º–µ—Å—Ç–∞",
      status: "active",
    });

    await Trip.create({
      driverId: driver2.id,
      from: { city: "–ê–Ω–¥–∏–∂–∞–Ω", address: "–ê–≤—Ç–æ–≤–æ–∫–∑–∞–ª –ê–Ω–¥–∏–∂–∞–Ω" },
      to: { city: "–§–µ—Ä–≥–∞–Ω–∞", address: "–ê–≤—Ç–æ–≤–æ–∫–∑–∞–ª –§–µ—Ä–≥–∞–Ω–∞" },
      departureTime: new Date("2024-12-23T09:15:00"),
      price: 80000,
      availableSeats: 1,
      description: "–£—Ç—Ä–µ–Ω–Ω—è—è –ø–æ–µ–∑–¥–∫–∞, —Å–≤–µ–∂–∏–π –≤–æ–∑–¥—É—Ö",
      status: "active",
    });

    await Trip.create({
      driverId: driver1.id,
      from: { city: "–ù–∞–º–∞–Ω–≥–∞–Ω", address: "–ê–≤—Ç–æ–≤–æ–∫–∑–∞–ª –ù–∞–º–∞–Ω–≥–∞–Ω" },
      to: { city: "–ê–Ω–¥–∏–∂–∞–Ω", address: "–ê–≤—Ç–æ–≤–æ–∫–∑–∞–ª –ê–Ω–¥–∏–∂–∞–Ω" },
      departureTime: new Date("2024-12-24T16:45:00"),
      price: 70000,
      availableSeats: 2,
      description: "–í–µ—á–µ—Ä–Ω—è—è –ø–æ–µ–∑–¥–∫–∞ –ø–æ—Å–ª–µ —Ä–∞–±–æ—Ç—ã",
      status: "active",
    });

    console.log("‚úÖ –£–∑–±–µ–∫—Å–∫–∏–µ –ø–æ–µ–∑–¥–∫–∏ —Å–æ–∑–¥–∞–Ω—ã!");
    console.log(
      "üó∫Ô∏è  –ú–∞—Ä—à—Ä—É—Ç—ã: –¢–∞—à–∫–µ–Ω—Ç‚Üí–°–∞–º–∞—Ä–∫–∞–Ω–¥, –¢–∞—à–∫–µ–Ω—Ç‚Üí–ë—É—Ö–∞—Ä–∞, –°–∞–º–∞—Ä–∫–∞–Ω–¥‚Üí–ë—É—Ö–∞—Ä–∞, –ê–Ω–¥–∏–∂–∞–Ω‚Üí–§–µ—Ä–≥–∞–Ω–∞, –ù–∞–º–∞–Ω–≥–∞–Ω‚Üí–ê–Ω–¥–∏–∂–∞–Ω"
    );
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞:", error);
  }
};

// –î–æ–±–∞–≤—å —ç—Ç–∏ —Å—Ç—Ä–æ–∫–∏ –≤ —Å–∞–º—ã–π –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞:
console.log("üì¢ –§—É–Ω–∫—Ü–∏—è seedData –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞, –∑–∞–ø—É—Å–∫–∞–µ–º...");

seedData()
  .then(() => {
    console.log("‚úÖ Seed –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!");
    process.exit(0);
  })
  .catch((error) => {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ seed:", error);
    process.exit(1);
  });
