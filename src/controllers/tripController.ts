import { Request, Response } from "express";
import { Op } from "sequelize";
import Trip from "../models/Trip";
import User from "../models/User";

export const getTrips = async (req: Request, res: Response) => {
  try {
    const { from, to, date, price, seats } = req.query;
    console.log("üìã –§–∏–ª—å—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:", { from, to, date, price, seats });

    // –ë–∞–∑–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è - —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–µ–∑–¥–∫–∏
    const whereClause: any = { status: "active" };

    // üîç –§–∏–ª—å—Ç—Ä –ø–æ –≥–æ—Ä–æ–¥—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    if (from) {
      whereClause.from = {
        [Op.contains]: { city: from.toString() },
      };
    }

    // üéØ –§–∏–ª—å—Ç—Ä –ø–æ –≥–æ—Ä–æ–¥—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
    if (to) {
      whereClause.to = {
        [Op.contains]: { city: to.toString() },
      };
    }

    // üìÖ –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    if (date) {
      const searchDate = new Date(date.toString());
      const nextDay = new Date(searchDate);
      nextDay.setDate(nextDay.getDate() + 1);

      whereClause.departureTime = {
        [Op.between]: [searchDate, nextDay],
      };
    }

    // üí∞ –§–∏–ª—å—Ç—Ä –ø–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω–µ
    if (price) {
      whereClause.price = {
        [Op.lte]: parseFloat(price.toString()),
      };
    }

    // üë• –§–∏–ª—å—Ç—Ä –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –º–µ—Å—Ç
    if (seats) {
      whereClause.availableSeats = {
        [Op.gte]: parseInt(seats.toString()),
      };
    }

    console.log("üîç –£—Å–ª–æ–≤–∏—è –ø–æ–∏—Å–∫–∞:", JSON.stringify(whereClause, null, 2));

    // –ò—â–µ–º –ø–æ–µ–∑–¥–∫–∏ —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤
    const trips = await Trip.findAll({
      where: whereClause,
      include: [
        {
          model: User,
          as: "driver",
          attributes: [
            "id",
            "firstName",
            "lastName",
            "avatar",
            "rating",
            "isVerified",
          ],
        },
      ],
      order: [["departureTime", "ASC"]],
    });

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–µ–∑–¥–æ–∫: ${trips.length}`);

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    const formattedTrips = trips.map((trip) => ({
      id: trip.id,
      departure: trip.from.city,
      arrival: trip.to.city,
      price: trip.price,
      departureTime: trip.departureTime,
      seatsAvailable: trip.availableSeats,
      driver: {
        avatar: trip.driver?.avatar || "/images/default-avatar.png",
        name: `${trip.driver?.firstName || "–í–æ–¥–∏—Ç–µ–ª—å"} ${
          trip.driver?.lastName || ""
        }`.trim(),
        rating: trip.driver?.rating || 5,
        varified: trip.driver?.isVerified || false,
      },
      from: trip.from,
      to: trip.to,
      description: trip.description,
      status: trip.status,
    }));

    res.json({
      success: true,
      data: formattedTrips,
      meta: {
        total: trips.length,
        filters: { from, to, date, price, seats },
      },
    });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–µ–∑–¥–æ–∫:", error);
    res.status(500).json({
      success: false,
      message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–µ–∑–¥–æ–∫",
      error: error instanceof Error ? error.message : "Unknown error",
    });
  }
};

export const createTrip = async (req: Request, res: Response) => {
  try {
    console.log("üìù –°–æ–∑–¥–∞–µ–º –ø–æ–µ–∑–¥–∫—É:", req.body);

    const { from, to, departureTime, price, availableSeats, description } =
      req.body;

    // –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    if (!from || !to || !departureTime || !price || !availableSeats) {
      return res.status(400).json({
        success: false,
        message: "–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã",
      });
    }

    // –°–æ–∑–¥–∞–µ–º –ø–æ–µ–∑–¥–∫—É —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º driverId (–¥–ª—è —Ç–µ—Å—Ç–∞)
    const trip = await Trip.create({
      driverId: 1, // –ü—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è
      from,
      to,
      departureTime: new Date(departureTime),
      price: parseFloat(price),
      availableSeats: parseInt(availableSeats),
      description: description || "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ",
      status: "active",
    });

    console.log("‚úÖ –ü–æ–µ–∑–¥–∫–∞ —Å–æ–∑–¥–∞–Ω–∞:", trip.id);

    res.status(201).json({
      success: true,
      message: "–ü–æ–µ–∑–¥–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ",
      data: trip,
    });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–µ–∑–¥–∫–∏:", error);
    res.status(500).json({
      success: false,
      message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
    });
  }
};

export const updateTrip = async (req: Request, res: Response) => {
  try {
    const { id } = req.params;
    const updateData = req.body;

    console.log("‚úèÔ∏è –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–µ–∑–¥–∫—É:", id, updateData);

    const trip = await Trip.findByPk(id);
    if (!trip) {
      return res.status(404).json({
        success: false,
        message: "–ü–æ–µ–∑–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
      });
    }

    await trip.update(updateData);

    res.json({
      success: true,
      message: "–ü–æ–µ–∑–¥–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞",
      data: trip,
    });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏:", error);
    res.status(500).json({
      success: false,
      message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
    });
  }
};

export const deleteTrip = async (req: Request, res: Response) => {
  try {
    const { id } = req.params;

    console.log("üóëÔ∏è –£–¥–∞–ª—è–µ–º –ø–æ–µ–∑–¥–∫—É:", id);

    const trip = await Trip.findByPk(id);
    if (!trip) {
      return res.status(404).json({
        success: false,
        message: "–ü–æ–µ–∑–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
      });
    }

    await trip.update({ status: "cancelled" });

    res.json({
      success: true,
      message: "–ü–æ–µ–∑–¥–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
    });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:", error);
    res.status(500).json({
      success: false,
      message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
    });
  }
};
