import { Request, Response } from "express";
import fs from "fs";
import path from "path";
import User from "../models/User";

export const uploadAvatar = async (req: Request, res: Response) => {
  try {
    if (!req.file) {
      return res.status(400).json({
        success: false,
        message: "–§–∞–π–ª –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω",
      });
    }

    const userId = req.user!.id;
    const fileUrl = `/uploads/avatars/${req.file.filename}`;

    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä
    await User.update({ avatar: fileUrl }, { where: { id: userId } });

    res.json({
      success: true,
      message: "–ê–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω",
      data: {
        avatar: fileUrl, // ‚úÖ –¢–û–õ–¨–ö–û –ù–û–í–´–ô URL –ê–í–ê–¢–ê–†–ê
      },
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞:", error);
    res.status(500).json({
      success: false,
      message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–≤–∞—Ç–∞—Ä–∞",
    });
  }
};

export const uploadCarPhotos = async (req: Request, res: Response) => {
  try {
    if (!req.files || (req.files as Express.Multer.File[]).length === 0) {
      return res.status(400).json({
        success: false,
        message: "–§–∞–π–ª—ã –Ω–µ –±—ã–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã",
      });
    }

    const userId = req.user!.id;
    const files = req.files as Express.Multer.File[];
    const uploadedFiles = files.map((file) => `/uploads/cars/${file.filename}`);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
    const user = await User.findByPk(userId);
    if (user) {
      let updatedCar;

      if (user.car) {
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ñ–æ—Ç–æ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º
        updatedCar = {
          ...user.car,
          photos: [...(user.car.photos || []), ...uploadedFiles],
        };
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç car –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        updatedCar = {
          model: "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
          color: "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
          year: new Date().getFullYear(),
          licensePlate: "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
          photos: uploadedFiles,
        };
      }

      await User.update({ car: updatedCar }, { where: { id: userId } });
    }

    res.json({
      success: true,
      message: "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã",
      data: {
        carPhotos: uploadedFiles, // ‚úÖ –¢–û–õ–¨–ö–û –ú–ê–°–°–ò–í –ù–û–í–´–• –§–û–¢–û
      },
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:", error);
    res.status(500).json({
      success: false,
      message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π",
    });
  }
};

// üóëÔ∏è –£–î–ê–õ–ï–ù–ò–ï –ü–û URL (–ö–û–ú–ü–ê–ö–¢–ù–ê–Ø –í–ï–†–°–ò–Ø)
export const deleteFileByUrl = async (req: Request, res: Response) => {
  try {
    const { fileUrl } = req.body;
    const userId = req.user!.id;

    if (!fileUrl) {
      return res.status(400).json({
        success: false,
        message: "URL —Ñ–∞–π–ª–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω",
      });
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º filename –∏–∑ URL
    const filename = fileUrl.split("/").pop();
    let folder = "";

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞–ø–∫—É –∏–∑ URL
    if (fileUrl.includes("/avatars/")) {
      folder = "avatars";
    } else if (fileUrl.includes("/cars/")) {
      folder = "cars";
    } else {
      return res.status(400).json({
        success: false,
        message: "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π URL —Ñ–∞–π–ª–∞",
      });
    }

    const filePath = path.join(__dirname, "../uploads", folder, filename!);

    if (fs.existsSync(filePath)) {
      fs.unlinkSync(filePath);

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
      const user = await User.findByPk(userId);

      if (user) {
        if (folder === "avatars" && user.avatar === fileUrl) {
          await User.update({ avatar: "" }, { where: { id: userId } });
        } else if (folder === "cars" && user.car?.photos) {
          const updatedPhotos = user.car.photos.filter(
            (photo: string) => photo !== fileUrl
          );
          const updatedCar = { ...user.car, photos: updatedPhotos };
          await User.update({ car: updatedCar }, { where: { id: userId } });
        }
      }

      res.json({
        success: true,
        message: "–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω",
        data: {
          deletedUrl: fileUrl, // ‚úÖ –¢–û–õ–¨–ö–û URL –£–î–ê–õ–ï–ù–ù–û–ì–û –§–ê–ô–õ–ê
        },
      });
    } else {
      res.status(404).json({
        success: false,
        message: "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω",
      });
    }
  } catch (error: any) {
    console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞:", error);
    res.status(500).json({
      success: false,
      message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞",
    });
  }
};
